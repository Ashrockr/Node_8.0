const mongoose = require('mongoose');
const Config = require('./config');
const uri = Config.MongoURI;

(async () => {
    try {
        var mongooseConnection = await mongoose.connect(uri, { useNewUrlParser: true });
        var connection = mongooseConnection.connection;

        //Person Model
        let Person = mongoose.model('Person', {
            name: {
                type: String,
                required: [true, 'Name is required'],
                match: [/^[a-zA-Z]+$/, 'Only Alphabets allowed']
            },
            age: {
                type: Number,
                required: [true, 'Age is required'],
                min: [30, 'Age must be minimum 30'],
                max: [40, 'Age must be maximum 40']
            },
            salutation: {
                type: String,
                enum: {
                    values: ['Mr', 'Ms', 'Mrs', 'Dr', 'Er'],
                    message: 'For `{PATH}` the value `{VALUE}` is not valid. Only Mr, Ms, Mrs, Dr and Er allowed'
                },
            },
            status: {
                type: String,
                default: 'Alive'
            },
            location: {
                type: String,
                validate: {
                    //if the location lenght is between 5 to 10 it will return true else error
                    validator: (val) => val.length >= 5 && val.length <= 10,
                    message: 'Only 5 to 10 characters allowed'
                }
            }
        }, 'persons');

        //Creating person instance from Schema with all possible validation errors
        let invalidPerson = new Person({
            name: 'Karthik M',
            age: 130,
            salutation: 'Mister',
            location: 'Bangalore City'
        });

        //Creating person instance from Schema which passes all validation errors
        let validPerson = new Person({
            name: 'Karthik',
            age: 34,
            salutation: 'Mr',
            location: 'Bangalore'
        });

        try {
            //Insert the document
            var personAdded = await invalidPerson.save();
            console.log('Person Added Successfully');
            console.log(personAdded);
            connection.close();
        } catch (err) {
            var validationErrors = {};
            for (const errKey in err.errors) {
                validationErrors[errKey] = err.errors[errKey].message;
            }
            console.log(validationErrors);
            connection.close();
        }
    } catch (err) {
        console.log(`Error: ${err}`);
    }
})();


/*
Person{
    _id : autogenerated,
    name:string (required,only alphabets allowed),
    age : number (required,min 30 max 40)
    salutation: string (Mr,Ms,Mrs,Dr)
    status : string (default alive)
    location:string (with in 5 to 10 characters)
} 
*/